<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shift Planner - Automated</title>
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    <style>
        /* Main page styling */
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 1400px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 10px; border-bottom: 1px solid #eee; }
        .user-info { background-color: #f0f0f0; padding: 10px; border-radius: 4px; margin-bottom: 20px; }
        .admin-controls { background-color: #e8f4fc; padding: 15px; border-radius: 4px; margin-bottom: 20px; border: 1px solid #2196F3; }
        .admin-controls label { font-weight: bold; margin-right: 10px; }
        /* Hide admin controls by default */
        .admin-only { display: none; }
        button { padding: 8px 12px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background-color: #45a049; }
        .logout-btn { background-color: #e74c3c; margin-left: 10px; }
        .logout-btn:hover { background-color: #c0392b; }
        .error-message { color: #e74c3c; margin: 10px 0; display: none; font-weight: bold;}
        .modal { display: none; position: fixed; z-index: 10; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.4); }
        .modal-content { background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 300px; border-radius: 8px; }
        .specialization-option { padding: 10px; margin: 5px 0; cursor: pointer; border-radius: 4px; text-align: center; }
        .specialization-option:hover { opacity: 0.8; }
        .runner { background-color: #ff6b6b; color: white; }
        .er { background-color: #5c6bc0; color: white; }
        .fire { background-color: #44af4a; color: white; }
        #calendar { margin-top: 20px; margin-bottom: 20px; }
        /* FullCalendar event colors */
        .fc-event.event-runner { background-color: #ff6b6b; border-color: #ff6b6b; }
        .fc-event.event-er { background-color: #5c6bc0; border-color: #5c6bc0; }
        .fc-event.event-fire { background-color: #44af4a; border-color: #44af4a; }
        .fc-event-title { font-weight: bold; } /* Make title stand out */
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Shift Planner</h1>
            <div>
                <span id="currentUser">User</span> |
                <span id="specializationDisplay">No Role Set</span> | <button id="settingsBtn">Change Role</button>
                <button class="logout-btn" onclick="logout()">Logout</button>
            </div>
        </header>

        <div id="adminControlsPanel" class="admin-controls admin-only">
            <h2>Admin Controls</h2>
            <div> <label for="jsonUpload">Upload New Schedule (JSON):</label>
                <input type="file" id="jsonUpload" accept=".json">
                <button id="loadScheduleBtn" style="margin-left: 10px;">Load Preview</button> </div>
            <div id="confirmSection" style="margin-top: 15px; display: none;"> <button id="confirmScheduleBtn" style="background-color: #28a745;">Confirm & Publish Schedule</button>
                 <button id="cancelPreviewBtn" style="background-color: #ffc107; margin-left: 10px;">Cancel Preview</button>
                 <p style="font-size: 0.9em; margin-top: 5px;">Preview loaded. Confirm to make it live for all users.</p>
            </div>
            <p id="adminInstruction" style="font-size: 0.9em; margin-top: 10px;">Load a JSON file to preview the schedule. Admins can remove shifts from the *live* schedule by clicking on them.</p>
        </div>

        <div class="user-info">
            <h3 id="displayUser">User</h3>
            <p id="shiftCount">0 upcoming shifts</p>
             </div>

        <div id="errorMessage" class="error-message">
            Error message will appear here
        </div>

        <div id='calendar'></div>

    </div>

    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h2>Select Your Role</h2>
            <div class="specialization-option runner" data-spec="Runner" data-class="runner">Runner (Red)</div>
            <div class="specialization-option er" data-spec="ER" data-class="er">ER (Blue)</div>
            <div class="specialization-option fire" data-spec="Fire" data-class="fire">Fire (Green)</div>
            <button style="margin-top: 20px; width: 100%;" id="closeModalBtn">Close</button>
        </div>
    </div>

    <script>
        // Application state
        let shiftData = {}; // Loaded from localStorage or JSON upload
        let stagedShiftData = null; // Holds the schedule loaded from JSON for PREVIEW
        let currentUser = sessionStorage.getItem('currentUser');
        let currentSpecialization = localStorage.getItem(`userSpec_${currentUser}`) || ''; // Load user's saved spec
        let isAdmin = currentUser === 'Admin'; // Check if user is Admin
        let calendarInstance = null;

        // Mapping between shift names in JSON and internal time representations
        // IMPORTANT: Ensure JSON file uses these exact keys ('morning', 'noon', etc.)
         const shiftKeyToTimeMap = {
            'morning':   { index: 1, start: '06:00:00', end: '10:00:00' },
            'noon':      { index: 2, start: '10:00:00', end: '14:00:00' },
            'afternoon': { index: 3, start: '14:00:00', end: '18:00:00' },
            'evening':   { index: 4, start: '18:00:00', end: '22:00:00' },
            'night':     { index: 5, start: '22:00:00', end: '06:00:00', nextDay: true }
        };
         const shiftIndexToTimeMap = { // For reverse lookup if needed
            1: shiftKeyToTimeMap['morning'],
            2: shiftKeyToTimeMap['noon'],
            3: shiftKeyToTimeMap['afternoon'],
            4: shiftKeyToTimeMap['evening'],
            5: shiftKeyToTimeMap['night'],
        }


        // Initialize the application
        function initializeApp() {
            if (!currentUser) {
                window.location.href = 'login.html'; // Redirect if not logged in
                return;
            }

            // Load shift data from localStorage
            shiftData = JSON.parse(localStorage.getItem('shiftData')) || {};

            // Set up UI based on user
            document.getElementById('currentUser').textContent = currentUser;
            document.getElementById('displayUser').textContent = currentUser;
            document.getElementById('specializationDisplay').textContent = currentSpecialization ? currentSpecialization.toUpperCase() : 'No Role Set';

            if (isAdmin) {
                document.getElementById('adminControlsPanel').style.display = 'block';
            }

            initializeCalendar();
            updateShiftCount();
            setupEventListeners();
        }

        // Convert loaded shiftData (from localStorage) to FullCalendar events
        function formatShiftsForCalendar() {
            const events = [];
            const today = new Date();

            for (const shiftId in shiftData) {
                const [shiftIndexStr, dayOfWeekStr] = shiftId.split('-'); // Format: "shiftIndex-dayOfWeek" (Mon=0...Sun=6)
                const shiftIndex = parseInt(shiftIndexStr, 10);
                const dayOfWeek = parseInt(dayOfWeekStr, 10);

                const users = shiftData[shiftId]; // Array of {user: 'name', spec: 'role'}

                // Filter events for non-admins
                const relevantUsers = isAdmin ? users : users.filter(u => u.user === currentUser);

                if (relevantUsers && relevantUsers.length > 0 && shiftIndexToTimeMap[shiftIndex]) {
                    const timeInfo = shiftIndexToTimeMap[shiftIndex];

                    // Calculate the specific date for the event based on the current week structure
                    // Find the next occurrence of 'dayOfWeek' (0=Mon...6=Sun) starting from today
                    let shiftDate = new Date(today);
                    // Adjust day to match the target day of the week
                    let currentDay = shiftDate.getDay(); // 0=Sun, 1=Mon...
                    let targetDay = (dayOfWeek + 1) % 7; // Convert Mon(0)->1, ..., Sun(6)->0 for getDay() comparison
                    let diff = targetDay - currentDay;
                    // If the target day is before the current day in the week, move to next week
                    // (This logic might need refinement based on how far back/forward you want to show shifts)
                    // if (diff < 0) { diff += 7; } // Simple approach: always show for the upcoming week instance
                     shiftDate.setDate(shiftDate.getDate() + diff);


                    let startDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.start}`;
                    let endDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.end}`;

                    if (timeInfo.nextDay) {
                        const nextDayDate = new Date(shiftDate);
                        nextDayDate.setDate(shiftDate.getDate() + 1);
                        endDateTimeStr = `${nextDayDate.toISOString().split('T')[0]}T${timeInfo.end}`;
                    }

                    // Create event title showing all users for that slot (Admin view)
                    // or just the current user (User view)
                    const title = relevantUsers.map(u => `${u.user} (${u.spec})`).join(', ');
                    const primarySpecClass = relevantUsers[0] ? `event-${relevantUsers[0].spec}` : '';

                    events.push({
                        id: shiftId, // Keep original shiftId
                        title: title,
                        start: startDateTimeStr,
                        end: endDateTimeStr,
                        allDay: false,
                        extendedProps: { users: users }, // Store all users for potential Admin use
                        className: primarySpecClass
                    });
                }
            }
            return events;
        }


        // Initialize FullCalendar
        function initializeCalendar() {
            const calendarEl = document.getElementById('calendar');
            calendarInstance = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: { /* ... same as before ... */ },
                // Use the helper function to load initial LIVE data
                events: function(fetchInfo, successCallback, failureCallback) {
                     try {
                         const liveEvents = generateEventsFromData(shiftData);
                         successCallback(liveEvents);
                     } catch (error) {
                         console.error("Error generating initial events:", error);
                         failureCallback(error);
                     }
                 },
                editable: false,
                selectable: false,
                dateClick: handleDateClick,
                eventClick: handleEventClick // Still used for removing from LIVE schedule
            });
            calendarInstance.render();
            console.log("Calendar initialized with LIVE data."); // DEBUG
        }

        // Update the shift count display (only counts shifts for the current user)
        function updateShiftCount() {
            let count = 0;
            for (const shiftId in shiftData) {
                if (shiftData[shiftId] && shiftData[shiftId].some(u => u.user === currentUser)) {
                    count++;
                }
            }
            document.getElementById('shiftCount').textContent = `${count} upcoming shifts assigned to you`;
        }

         // Handle clicking on a date/time slot (Only relevant for potential future admin actions)
         function handleDateClick(info) {
             if (!isAdmin) {
                 // Non-admins cannot add shifts by clicking
                  showError("Shifts are assigned automatically. View your schedule here.");
                 return;
             }
             // Admin functionality for clicking empty slots (if needed in future)
             // console.log('Admin clicked on empty slot:', info.dateStr);
             showError("Admin clicked empty slot. Add functionality not implemented via click.");

         }

        // Handle clicking on an existing event (FullCalendar version)
        function handleEventClick(info) {
            console.log("handleEventClick triggered. isAdmin:", isAdmin); // DEBUG

            if (!isAdmin) {
                // Non-admins cannot interact with events
                showError("Shifts are assigned automatically. You cannot modify them here.");
                return;
            }

            // Admin: Allow removal of any shift assignment
            const event = info.event; // Get the FullCalendar event object itself
            const shiftId = event.id; // Get shiftId assigned when creating the event

            console.log("Admin clicked event:", event); // DEBUG
            console.log("Shift ID from event:", shiftId); // DEBUG
            console.log("Current shiftData before removal:", JSON.parse(JSON.stringify(shiftData))); // DEBUG - Log a copy

            // Check if the shiftId exists in our data structure
            if (!shiftId || !shiftData[shiftId]) {
                 console.error("Error: Could not find shiftId", shiftId, "in shiftData:", shiftData); // DEBUG
                 showError("Error: Could not find this shift in the data. It might have already been removed or wasn't loaded correctly.");
                 return;
            }

             // Confirmation dialog
            let confirmationMessage = `Remove the entire shift slot ${shiftId} (${event.title})?`;
            const confirmed = confirm(confirmationMessage);
            console.log("Confirmation result:", confirmed); // DEBUG

            if (confirmed) {
                console.log("Attempting to delete shiftData entry for key:", shiftId); // DEBUG

                 // --- Apply the fix here ---
                try {
                    // 1. Delete from the source data object
                    delete shiftData[shiftId];
                    console.log("shiftData after deletion attempt:", JSON.parse(JSON.stringify(shiftData))); // DEBUG

                    // 2. Save the updated data to localStorage
                    saveShifts();
                    console.log("saveShifts called successfully."); // DEBUG

                    // 3. Remove the event directly from the calendar's view API
                    event.remove(); // <<<<< USE THIS INSTEAD OF refetchEvents()
                    console.log("Called event.remove() successfully."); // DEBUG

                    // 4. Update the user's personal shift count
                    updateShiftCount();

                    showError("Shift removed successfully.", true); // Show success message

                } catch (e) {
                     console.error("Error during shift removal process:", e); // DEBUG
                     showError(`An error occurred while removing the shift: ${e.message}`);
                }
                 // --- End fix section ---

            } else {
                 console.log("Admin cancelled removal."); // DEBUG
                 showError(""); // Clear any previous messages if cancelled
            }
        }

        // Process the uploaded JSON file into the STAGING area (Admin only)
        function processUploadedSchedule(file) {
            console.log("Starting processUploadedSchedule for PREVIEW...");
            if (!file) {
                showError("No file selected.");
                return;
            }
            const reader = new FileReader();
            reader.onload = function(event) {
                try {
                    const uploadedJson = JSON.parse(event.target.result);
                    console.log("Parsed JSON content:", uploadedJson);
                    if (!Array.isArray(uploadedJson)) {
                        throw new Error("JSON file should contain an array of shift objects.");
                    }

                    const newStagedData = {}; // Process into a temporary object first
                    let processingError = false;
                    uploadedJson.forEach((item, index) => {
                        // --- Validation logic remains the same ---
                        if (!item.date || !item.shift || !item.spec || !item.user) {
                             console.warn(`Skipping invalid item at index ${index}: Missing required fields.`, item); processingError = true; return;
                        }
                         const timeInfo = shiftKeyToTimeMap[item.shift.toLowerCase()];
                         if (!timeInfo) {
                             console.warn(`Skipping item at index ${index}: Unknown shift key '${item.shift}'.`, item); processingError = true; return;
                         }
                         const shiftIndex = timeInfo.index;
                         const itemDate = new Date(item.date + 'T00:00:00');
                         if (isNaN(itemDate.getTime())) {
                            console.warn(`Skipping item at index ${index}: Invalid date '${item.date}'.`, item); processingError = true; return;
                         }
                         const dayOfWeek = (itemDate.getDay() + 6) % 7;
                         const shiftId = `${shiftIndex}-${dayOfWeek}`;
                         // --- End validation ---

                         if (!newStagedData[shiftId]) {
                             newStagedData[shiftId] = [];
                         }
                         newStagedData[shiftId].push({ user: item.user, spec: item.spec.toLowerCase() });
                    });

                    console.log("Finished processing JSON for staging. Staged data:", JSON.parse(JSON.stringify(newStagedData)));

                    // Store processed data in the staging variable
                    stagedShiftData = newStagedData;

                    // Update Admin's calendar view to show the PREVIEW
                    displayStagedSchedule(); // Call helper function to show preview

                    // Show the confirm/cancel buttons and hide initial instruction
                    document.getElementById('confirmSection').style.display = 'block';
                    document.getElementById('adminInstruction').style.display = 'none';


                    if (processingError) {
                         showError("Preview loaded, but some items in the JSON had errors (see console). Review before confirming.", false);
                    } else {
                         showError("Preview loaded successfully. Review and then confirm or cancel.", true);
                    }


                } catch (e) {
                    stagedShiftData = null; // Clear staged data on error
                    document.getElementById('confirmSection').style.display = 'none'; // Hide confirm buttons
                    document.getElementById('adminInstruction').style.display = 'block'; // Reshow instruction
                    showError(`Error processing JSON file: ${e.message}`);
                    console.error("JSON processing error:", e);
                }
            };
            reader.onerror = function() {
                showError("Error reading the selected file.");
                stagedShiftData = null;
                document.getElementById('confirmSection').style.display = 'none';
                 document.getElementById('adminInstruction').style.display = 'block';
            };
            reader.readAsText(file);
        }


        // Save shifts to localStorage
        function saveShifts() {
            localStorage.setItem('shiftData', JSON.stringify(shiftData));
        }

        // Show error/success message
        function showError(message, isSuccess = false) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = message;
            errorElement.style.color = isSuccess ? '#28a745' : '#e74c3c'; // Green for success, Red for error
            errorElement.style.display = message ? 'block' : 'none';
            if(message) {
                 setTimeout(() => errorElement.style.display = 'none', 5000); // Show for 5 seconds
            }
        }

        // Close modal dialog
        function closeModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // Handle logout
        function logout() {
            sessionStorage.removeItem('currentUser');
            // Optionally remove user-specific settings from localStorage on logout
            // localStorage.removeItem(`userSpec_${currentUser}`);
            window.location.href = 'login.html';
        }

        // Initialize event listeners
        function setupEventListeners() {
            // --- Settings button and Role selection listeners remain the same ---
             document.getElementById('settingsBtn').addEventListener('click', function() { /* ... */ });
             document.querySelectorAll('.specialization-option').forEach(option => { /* ... */ });
             document.getElementById('closeModalBtn').addEventListener('click', closeModal);

            // Admin listeners
            if (isAdmin) {
                const loadButton = document.getElementById('loadScheduleBtn');
                const fileInput = document.getElementById('jsonUpload');
                const confirmButton = document.getElementById('confirmScheduleBtn'); // Get new button
                const cancelButton = document.getElementById('cancelPreviewBtn'); // Get new button

                if (loadButton && fileInput && confirmButton && cancelButton) { // Check for all buttons
                     console.log("Admin controls found, adding listeners...");
                     // Listener for Load Preview button
                     loadButton.addEventListener('click', function() {
                        console.log("Load Preview button CLICKED.");
                        const selectedFile = fileInput.files[0];
                        console.log("File selected:", selectedFile);
                        if (selectedFile) {
                            processUploadedSchedule(selectedFile);
                        } else {
                            showError("Please select a JSON file first.");
                        }
                    });

                    // Listener for Confirm button
                    confirmButton.addEventListener('click', confirmAndPublishSchedule);

                    // Listener for Cancel button
                    cancelButton.addEventListener('click', cancelSchedulePreview);

                } else {
                    console.error("Admin controls (buttons or file input) not found in the DOM.");
                }
            } else {
                 console.log("User is not admin, skipping Admin control listeners.");
            }
        }
            // Close modal button
            document.getElementById('closeModalBtn').addEventListener('click', closeModal);

            // Admin: File upload listener
            if (isAdmin) {
                const loadButton = document.getElementById('loadScheduleBtn');
                const fileInput = document.getElementById('jsonUpload');

                if (loadButton && fileInput) {
                     console.log("Admin controls found, attempting to add listener to Load Schedule button."); // DEBUG
                     loadButton.addEventListener('click', function() {
                        console.log("Load Schedule button CLICKED."); // DEBUG - Check if this appears on click

                        const selectedFile = fileInput.files[0]; // Get the file selected by the user
                        console.log("File selected:", selectedFile); // DEBUG - Check if a file object is logged

                        if (selectedFile) {
                            processUploadedSchedule(selectedFile); // Call the processing function
                        } else {
                            console.log("No file selected in the input."); // DEBUG
                            showError("Please select a JSON file first.");
                        }
                    });
                } else {
                    console.error("Admin controls (load button or file input) not found in the DOM."); // DEBUG
                }
            } else {
                 console.log("User is not admin, skipping Admin control listeners."); // DEBUG
            }
        }
        // Helper function to format data (accepts data object as argument)
        function generateEventsFromData(dataToFormat) {
             const events = [];
             const today = new Date();

             // --- Logic is the same as original formatShiftsForCalendar ---
             // --- EXCEPT it reads from 'dataToFormat' instead of global 'shiftData' ---
             // --- AND it only needs to format based on 'isAdmin' view if needed ---
             // --- For simplicity, Admin preview shows all users in the staged data ---
             for (const shiftId in dataToFormat) {
                 const [shiftIndexStr, dayOfWeekStr] = shiftId.split('-');
                 const shiftIndex = parseInt(shiftIndexStr, 10);
                 const dayOfWeek = parseInt(dayOfWeekStr, 10);
                 const users = dataToFormat[shiftId]; // Users from the data passed in

                 // Admin preview always shows all users planned for the shift
                 const relevantUsers = users; // In preview mode, admin sees everything in the staged data

                 if (relevantUsers && relevantUsers.length > 0 && shiftIndexToTimeMap[shiftIndex]) {
                     const timeInfo = shiftIndexToTimeMap[shiftIndex];
                     let shiftDate = new Date(today);
                     let currentDay = shiftDate.getDay();
                     let targetDay = (dayOfWeek + 1) % 7;
                     let diff = targetDay - currentDay;
                     shiftDate.setDate(shiftDate.getDate() + diff);

                     let startDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.start}`;
                     let endDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.end}`;
                     if (timeInfo.nextDay) {
                         const nextDayDate = new Date(shiftDate);
                         nextDayDate.setDate(shiftDate.getDate() + 1);
                         endDateTimeStr = `${nextDayDate.toISOString().split('T')[0]}T${timeInfo.end}`;
                     }

                     const title = relevantUsers.map(u => `${u.user} (${u.spec})`).join(', ');
                     const primarySpecClass = relevantUsers[0] ? `event-${relevantUsers[0].spec}` : '';

                     events.push({
                         id: shiftId, title: title, start: startDateTimeStr, end: endDateTimeStr,
                         allDay: false, extendedProps: { users: users }, className: primarySpecClass
                     });
                 }
             }
             console.log("Generated events for display:", events); // DEBUG
             return events;
         }

        // Function to display the STAGED schedule (Admin Preview)
        function displayStagedSchedule() {
            if (!calendarInstance || stagedShiftData === null) return;
            console.log("Displaying STAGED schedule..."); // DEBUG
            calendarInstance.removeAllEvents(); // Clear current calendar events
            const stagedEvents = generateEventsFromData(stagedShiftData);
            calendarInstance.addEventSource(stagedEvents); // Add staged events
            // Make events non-interactive during preview? Optional.
             // calendarInstance.setOption('eventClick', null); // Disable clicking events in preview
             // calendarInstance.setOption('dateClick', null); // Disable clicking dates in preview
        }

        // Function to display the LIVE schedule (from shiftData)
        function displayLiveSchedule() {
             if (!calendarInstance) return;
             console.log("Displaying LIVE schedule..."); // DEBUG
             calendarInstance.removeAllEvents();
             const liveEvents = generateEventsFromData(shiftData); // Use global shiftData
             calendarInstance.addEventSource(liveEvents);
             // Re-enable interaction if it was disabled
              // calendarInstance.setOption('eventClick', handleEventClick);
              // calendarInstance.setOption('dateClick', handleDateClick);
        }
        // Handler for the "Confirm & Publish Schedule" button
        function confirmAndPublishSchedule() {
            console.log("Confirm & Publish button clicked."); // DEBUG
            if (stagedShiftData === null) {
                showError("No staged schedule to confirm.");
                return;
            }

            // 1. Make the staged data the live data
            shiftData = stagedShiftData;
            stagedShiftData = null; // Clear staging area

            // 2. Save the now-live data to localStorage
            saveShifts();
            console.log("Confirmed schedule saved to localStorage."); // DEBUG

            // 3. Update calendar view to show live data
            displayLiveSchedule();

            // 4. Update UI
            document.getElementById('confirmSection').style.display = 'none'; // Hide confirm/cancel
            document.getElementById('adminInstruction').style.display = 'block'; // Show original instruction
            document.getElementById('jsonUpload').value = ''; // Clear file input

            showError("Schedule confirmed and published successfully!", true);
            updateShiftCount(); // Update admin's own count based on new live schedule
        }

        // Handler for the "Cancel Preview" button
        function cancelSchedulePreview() {
            console.log("Cancel Preview button clicked."); // DEBUG
            stagedShiftData = null; // Discard staged data

            // Restore calendar view to show live data
            displayLiveSchedule();

            // Update UI
            document.getElementById('confirmSection').style.display = 'none'; // Hide confirm/cancel
            document.getElementById('adminInstruction').style.display = 'block'; // Show original instruction
             document.getElementById('jsonUpload').value = ''; // Clear file input

            showError("Preview cancelled. Displaying live schedule.");
        }

        // Start the application
         document.addEventListener('DOMContentLoaded', initializeApp);

    </script>
</body>
</html>