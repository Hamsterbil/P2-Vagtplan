#Copy paste this to see how it works until final implementation with actual server is complete
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shift Planner - Bootstrap (Split Colors)</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>

    <style>
        /* Keep minimal custom styles */
        .fc-event.event-runner { background-color: #ff6b6b !important; border-color: #ff6b6b !important; color: white !important; }
        .fc-event.event-er    { background-color: #5c6bc0 !important; border-color: #5c6bc0 !important; color: white !important; }
        .fc-event.event-fire  { background-color: #44af4a !important; border-color: #44af4a !important; color: white !important; }
        /* Adjust title style for potentially smaller blocks */
        .fc-event-title { font-weight: bold; font-size: 0.8em; padding: 1px 3px;}

        /* Ensure slider value span is aligned */
        .slider-container label { display: block; }
        .slider-container .form-range { width: calc(100% - 40px); display: inline-block; vertical-align: middle; }
        .slider-container .slider-value { display: inline-block; width: 30px; text-align: right; font-weight: bold; vertical-align: middle; margin-left: 5px;}

        /* Utility to hide elements */
        .admin-only:not(.d-block), .non-admin-only:not(.d-inline-block) { display: none; }
    </style>
</head>
<body class="bg-light">

    <div class="container-fluid my-3">

        <nav class="navbar navbar-expand-sm navbar-light bg-white border rounded mb-3 p-2">
            <div class="container-fluid"> <a class="navbar-brand" href="#">Shift Planner</a> <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent"> <span class="navbar-toggler-icon"></span> </button> <div class="collapse navbar-collapse" id="navbarContent"> <div class="ms-auto d-flex align-items-center flex-wrap"> <span class="navbar-text me-2 small" id="currentUser">User</span> <span class="navbar-text me-3 small">|</span> <span class="navbar-text me-2 small" id="specializationDisplay">No Role Set</span> <span class="navbar-text me-3 small">|</span> <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="settingsBtn"> Settings </button> <button class="btn btn-sm btn-danger" onclick="logout()">Logout</button> </div> </div> </div>
        </nav>

        <div id="adminControlsPanel" class="card admin-only mb-3">
            <h5 class="card-header bg-info-subtle">Admin Controls</h5> <div class="card-body"> <div class="mb-3"> <label for="jsonUpload" class="form-label">Upload Schedule (JSON):</label> <div class="input-group"> <input type="file" class="form-control form-control-sm" id="jsonUpload" accept=".json"> <button id="loadScheduleBtn" class="btn btn-primary btn-sm">Load Preview</button> </div> </div> <div id="confirmSection" class="mt-3 border-top pt-3 d-none"> <button id="confirmScheduleBtn" class="btn btn-success me-2">Confirm & Publish</button> <button id="cancelPreviewBtn" class="btn btn-warning">Cancel Preview</button> <p class="form-text mt-2 mb-0">Preview loaded.</p> </div> <p id="adminInstruction" class="form-text mt-2 mb-0">Load JSON to preview. Admins can remove shifts from live schedule.</p> <div class="mt-3 border-top pt-3"> <button id="generateScheduleBtn" class="btn btn-info btn-sm">Generate Schedule</button> <p class="form-text mt-1 mb-0">Generate & download schedule (uses scheduler.js).</p> </div> </div>
        </div>

        <div class="user-info p-3 mb-3 bg-body-secondary rounded d-flex justify-content-between align-items-center flex-wrap">
            <div> <h3 id="displayUser" class="h5 mb-1">User</h3> <p id="shiftCount" class="mb-0 text-muted small">0 upcoming shifts</p> </div> <button id="viewToggleBtn" class="btn btn-sm btn-secondary non-admin-only">Show My Shifts Only</button>
        </div>

        <div id="errorMessage" class="alert alert-danger mt-2 d-none" role="alert"></div>

        <div id='calendar' class="bg-white p-3 rounded border"></div>

    </div> <div class="modal fade" id="adminDaySettingsModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable"> <div class="modal-content"> <div class="modal-header"> <h1 class="modal-title fs-5">Daily Role Needs</h1> <button type="button" class="btn-close" data-bs-dismiss="modal"></button> </div> <div class="modal-body"> <p class="text-muted small mb-3">Set desired staff count per role per day.</p> <div id="daySettingsContainer"> </div> </div> <div class="modal-footer"> <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> <button type="button" class="btn btn-primary" id="saveDaySettingsBtn">Save Settings</button> </div> </div> </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script src="scheduler.js"></script>

    <script>
        // --- Application State ---
        let shiftData = {}; let stagedShiftData = null; let currentUser = sessionStorage.getItem('currentUser');
        let currentSpecialization = localStorage.getItem(`userSpec_${currentUser}`) || '';
        let isAdmin = currentUser === 'Admin';
        let viewMode = isAdmin ? 'all' : (localStorage.getItem(`viewMode_${currentUser}`) || 'all');
        let daySettings = {}; let calendarInstance = null; let adminSettingsModalInstance = null;

        // --- Constants ---
        const DAYS_OF_WEEK = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
        const PLANNER_ROLES = typeof ROLES !== 'undefined' ? ROLES : ['runner', 'er', 'fire']; // Use from scheduler.js if available
        const shiftKeyToTimeMap = {}; const shiftIndexToTimeMap = {};
        Object.assign(shiftKeyToTimeMap, { 'morning': { index: 1, start: '06:00:00', end: '10:00:00' }, 'noon': { index: 2, start: '10:00:00', end: '14:00:00' }, 'afternoon': { index: 3, start: '14:00:00', end: '18:00:00' }, 'evening': { index: 4, start: '18:00:00', end: '22:00:00' }, 'night': { index: 5, start: '22:00:00', end: '06:00:00', nextDay: true } });
        Object.assign(shiftIndexToTimeMap, { 1: shiftKeyToTimeMap['morning'], 2: shiftKeyToTimeMap['noon'], 3: shiftKeyToTimeMap['afternoon'], 4: shiftKeyToTimeMap['evening'], 5: shiftKeyToTimeMap['night'], });

        // --- Initialization ---
        function initializeApp() { /* ... same ... */ if (!currentUser) { window.location.href = 'login.html'; return; } shiftData = JSON.parse(localStorage.getItem('shiftData')) || {}; daySettings = JSON.parse(localStorage.getItem('daySettings')) || getDefaultDaySettings(); document.getElementById('currentUser').textContent = currentUser; document.getElementById('displayUser').textContent = currentUser; document.getElementById('specializationDisplay').textContent = currentSpecialization ? currentSpecialization.toUpperCase() : 'No Role Set'; const adminPanel = document.getElementById('adminControlsPanel'); const toggleBtn = document.getElementById('viewToggleBtn'); if (isAdmin) { adminPanel.classList.remove('d-none'); adminPanel.classList.add('d-block'); toggleBtn.classList.add('d-none'); generateAdminSettingsSliders(); } else { adminPanel.classList.add('d-none'); toggleBtn.classList.remove('d-none'); toggleBtn.classList.add('d-inline-block'); toggleBtn.textContent = (viewMode === 'mine') ? 'Show All Shifts' : 'Show My Shifts Only'; } const adminModalEl = document.getElementById('adminDaySettingsModal'); if (adminModalEl) { adminSettingsModalInstance = new bootstrap.Modal(adminModalEl); } initializeCalendar(); updateShiftCount(); setupEventListeners(); }
        function initializeCalendar() { /* ... same ... */ const calendarEl = document.getElementById('calendar'); calendarInstance = new FullCalendar.Calendar(calendarEl, { initialView: 'timeGridWeek', headerToolbar: { left: 'prev,next today', center: 'title', right: 'dayGridMonth,timeGridWeek,timeGridDay' }, editable: false, selectable: false, dateClick: handleDateClick, eventClick: handleEventClick }); calendarInstance.render(); console.log("Rendered."); displayLiveSchedule(); console.log("Initialized."); }
        function getDefaultDaySettings() { /* ... same ... */ const defaults = {}; DAYS_OF_WEEK.forEach(day => { defaults[day] = {}; PLANNER_ROLES.forEach(role => { defaults[day][role] = 0; }); }); return defaults; }
        function generateAdminSettingsSliders() { /* ... same ... */ const container = document.getElementById('daySettingsContainer'); if (!container) return; let html = ''; DAYS_OF_WEEK.forEach(day => { html += `<div class="mb-4 border-bottom pb-2"><h5 class="text-capitalize">${day}</h5>`; PLANNER_ROLES.forEach(role => { const settingValue = daySettings[day]?.[role] ?? 0; const sliderId = `settings-${day}-${role}`; html += `<div class="slider-container mb-2"><label for="${sliderId}" class="form-label text-capitalize">${role}:</label><input type="range" class="form-range" min="0" max="10" step="1" id="${sliderId}" value="${settingValue}"><span class="slider-value">${settingValue}</span></div>`; }); html += `</div>`; }); container.innerHTML = html; container.querySelectorAll('.form-range').forEach(slider => { slider.addEventListener('input', (e) => { const valueSpan = e.target.nextElementSibling; if (valueSpan?.classList.contains('slider-value')) { valueSpan.textContent = e.target.value; } }); }); }

        // --- Event Generation & Display ---

        // *** MODIFIED: Generates separate event object for EACH user in a slot ***
        function generateEventsFromData(dataToFormat) {
             const events = [];
             const today = new Date();
             const applyUserFilter = !isAdmin && viewMode === 'mine'; // Should we filter for current user?

             for (const shiftId in dataToFormat) {
                 const [shiftIndexStr, dayOfWeekStr] = shiftId.split('-');
                 const shiftIndex = parseInt(shiftIndexStr, 10);
                 const dayOfWeek = parseInt(dayOfWeekStr, 10);
                 const usersInSlot = dataToFormat[shiftId] || []; // All users assigned to this specific slot

                 // Loop through EACH user assigned to this slot
                 usersInSlot.forEach(user => {
                     // If filtering is needed, skip users who are not the current user
                     if (applyUserFilter && user.user !== currentUser) {
                         return; // Skip this user, continue to next user in this slot
                     }

                     // Proceed to create an event object for this specific user
                     if (shiftIndexToTimeMap[shiftIndex]) {
                         const timeInfo = shiftIndexToTimeMap[shiftIndex];
                         // Date calculation logic...
                         let shiftDate = new Date(today); let currentDay = shiftDate.getDay(); let targetDay = (dayOfWeek + 1) % 7;
                         let diff = targetDay - currentDay; shiftDate.setDate(shiftDate.getDate() + diff);
                         // End date calculation

                         let startDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.start}`;
                         let endDateTimeStr = `${shiftDate.toISOString().split('T')[0]}T${timeInfo.end}`;
                         if (timeInfo.nextDay) { const nextDayDate = new Date(shiftDate); nextDayDate.setDate(shiftDate.getDate() + 1); endDateTimeStr = `${nextDayDate.toISOString().split('T')[0]}T${timeInfo.end}`; }

                         // Class name based on THIS user's role
                         const userSpecClass = `event-${user.spec}`;
                         // Title specific to THIS user
                         const title = `${user.user} (${user.spec})`;
                         // Generate a more specific ID if needed, or keep shiftId and use extendedProps
                         const eventObjectId = `${shiftId}-${user.user}`; // Unique ID for this specific visual block

                         events.push({
                             id: eventObjectId, // Use the more specific ID for this block
                             groupId: shiftId, // Keep original shiftId as groupId for reference
                             title: title,
                             start: startDateTimeStr,
                             end: endDateTimeStr,
                             allDay: false,
                             // Store specific user info for click handling
                             extendedProps: {
                                 user: user.user, // The user this block represents
                                 spec: user.spec,
                                 originalShiftId: shiftId // Store original ID from shiftData
                             },
                             className: userSpecClass // Apply color class for this user
                         });
                     }
                 }); // End loop through users in slot
             } // End loop through shiftIds
             console.log(`Generated ${events.length} event objects (Mode: ${viewMode}, Filter: ${applyUserFilter})`);
             return events;
         }

        function displayStagedSchedule() { /* ... uses setOption, calls generateEventsFromData ... */ if (!calendarInstance || stagedShiftData === null) return; console.log("Display STAGED"); try { const currentVM = viewMode; viewMode = 'all'; const ev = generateEventsFromData(stagedShiftData); viewMode = currentVM; calendarInstance.setOption('events', ev); console.log("Set staged."); } catch (e) { console.error("Err display staged:", e); showError("Err preview."); } }
        function displayLiveSchedule() { /* ... uses setOption, calls generateEventsFromData ... */ if (!calendarInstance) return; console.log("Display LIVE"); try { const ev = generateEventsFromData(shiftData); calendarInstance.setOption('events', ev); console.log("Set live."); } catch (e) { console.error("Err display live:", e); showError("Err schedule."); } }

        // --- Admin Actions ---
        function processUploadedSchedule(file) { /* ... same ... */ console.log("Processing upload..."); if (!file) { showError("No file."); return; } const reader = new FileReader(); reader.onload = function(event) { try { const json = JSON.parse(event.target.result); if (!Array.isArray(json)) throw new Error("Need array."); const data = {}; let err = false; json.forEach((item, i) => { if (!item.date || !item.shift || !item.spec || !item.user) { console.warn(`Skip invalid ${i}`); err = true; return; } const timeInfo = shiftKeyToTimeMap[item.shift.toLowerCase()]; if (!timeInfo) { console.warn(`Skip ${i}: Bad key`); err = true; return; } const idx = timeInfo.index; const date = new Date(item.date + 'T00:00:00'); if (isNaN(date.getTime())) { console.warn(`Skip ${i}: Bad date`); err = true; return; } const day = (date.getDay() + 6) % 7; const id = `${idx}-${day}`; if (!data[id]) { data[id] = []; } data[id].push({ user: item.user, spec: item.spec.toLowerCase() }); }); console.log("Staging done:", data); stagedShiftData = data; displayStagedSchedule(); document.getElementById('confirmSection').classList.remove('d-none'); document.getElementById('adminInstruction').classList.add('d-none'); showError(err ? "Preview errors." : "Preview loaded.", !err); } catch (e) { stagedShiftData = null; document.getElementById('confirmSection').classList.add('d-none'); document.getElementById('adminInstruction').classList.remove('d-none'); showError(`JSON Err: ${e.message}`); } }; reader.onerror = function() { showError("Read Err."); stagedShiftData = null; document.getElementById('confirmSection').classList.add('d-none'); document.getElementById('adminInstruction').classList.remove('d-none'); }; reader.readAsText(file); }
        function confirmAndPublishSchedule() { /* ... same ... */ console.log("Confirm click."); if (stagedShiftData === null) { showError("No staged data."); return; } shiftData = stagedShiftData; stagedShiftData = null; saveShifts(); console.log("Saved."); displayLiveSchedule(); document.getElementById('confirmSection').classList.add('d-none'); document.getElementById('adminInstruction').classList.remove('d-none'); document.getElementById('jsonUpload').value = ''; showError("Published!", true); updateShiftCount(); }
        function cancelSchedulePreview() { /* ... same ... */ console.log("Cancel click."); stagedShiftData = null; displayLiveSchedule(); document.getElementById('confirmSection').classList.add('d-none'); document.getElementById('adminInstruction').classList.remove('d-none'); document.getElementById('jsonUpload').value = ''; showError("Preview cancelled."); }
        function saveAdminDaySettings() { /* ... same ... */ console.log("Saving day settings..."); const newSettings = getDefaultDaySettings(); let error = false; try { DAYS_OF_WEEK.forEach(day => { PLANNER_ROLES.forEach(role => { const slider = document.getElementById(`settings-${day}-${role}`); if (slider) { newSettings[day][role] = parseInt(slider.value, 10); } else { console.error(`Slider missing: settings-${day}-${role}`); error = true; } }); }); if (error) throw new Error("Slider read error."); daySettings = newSettings; localStorage.setItem('daySettings', JSON.stringify(daySettings)); console.log("Saved settings:", daySettings); showError("Daily settings saved!", true); if(adminSettingsModalInstance) adminSettingsModalInstance.hide(); } catch (e) { console.error("Err save settings:", e); showError(`Err save settings: ${e.message}`); } }

        // --- Event Interaction ---
        function handleDateClick(info) { /* ... same ... */ if (stagedShiftData !== null && isAdmin) { console.log("Preview: Date click ignored."); showError("Viewing preview."); return; } if (!isAdmin) { showError("Shifts assigned automatically."); return; } console.log('Admin clicked empty slot:', info.dateStr); showError("Add via click disabled."); }

        // *** MODIFIED: Handles removal of a specific user from a slot ***
        function handleEventClick(info) {
            // Prevent action if in preview mode
            if (stagedShiftData !== null && isAdmin) { console.log("Preview: Event click ignored."); showError("Viewing preview."); return; }
            // Prevent non-admins from removing shifts
            if (!isAdmin) { showError("Cannot modify shifts."); return; }

            const clickedEvent = info.event;
            // Get data stored when creating the event
            const userToRemove = clickedEvent.extendedProps.user;
            const specOfUser = clickedEvent.extendedProps.spec;
            const originalShiftId = clickedEvent.extendedProps.originalShiftId; // The key in shiftData

            console.log(`Admin clicked event for user: ${userToRemove} in slot: ${originalShiftId}`);

            if (!originalShiftId || !shiftData[originalShiftId]) {
                console.error("Cannot find original shiftId in live data:", originalShiftId);
                showError("Cannot find shift data for this slot.");
                return;
            }

            // Find the index of the specific user within the array for this slot
            const userIndex = shiftData[originalShiftId].findIndex(u => u.user === userToRemove && u.spec === specOfUser);

            if (userIndex === -1) {
                console.error(`User ${userToRemove} with spec ${specOfUser} not found in shiftData[${originalShiftId}]`);
                showError("Could not find this specific user assignment in the live data.");
                return;
            }

            // Confirm removal of the specific user
            if (confirm(`Remove ${userToRemove} (${specOfUser}) from shift slot ${originalShiftId}?`)) {
                console.log(`Attempting delete user index ${userIndex} from LIVE shiftData[${originalShiftId}]`);
                try {
                    // Remove the specific user object from the array
                    shiftData[originalShiftId].splice(userIndex, 1);

                    // If the array for this slot is now empty, remove the slot itself
                    if (shiftData[originalShiftId].length === 0) {
                        console.log(`Slot ${originalShiftId} is now empty, removing key.`);
                        delete shiftData[originalShiftId];
                    }

                    saveShifts(); // Save updated live data
                    console.log("Saved updated shiftData.");

                    // Refresh the entire calendar view to reflect the change
                    displayLiveSchedule();
                    // Note: We don't use event.remove() as it only removes the clicked visual part.
                    // We need to redraw based on the updated shiftData.

                    updateShiftCount(); // Update count display
                    showError(`Removed ${userToRemove} from shift.`, true);

                } catch (e) {
                    console.error("Error removing user from live shift:", e);
                    showError(`Error removing shift: ${e.message}`);
                }
            } else {
                console.log("Admin cancelled removal.");
            }
        }

        // --- Utility Functions ---
        function saveShifts() { localStorage.setItem('shiftData', JSON.stringify(shiftData)); }
        function updateShiftCount() { /* ... same ... */ let count = 0; for (const id in shiftData) { if (shiftData[id]?.some(u => u.user === currentUser)) { count++; } } document.getElementById('shiftCount').textContent = `${count} shifts assigned`; }
        function showError(message, isSuccess = false) { /* ... same ... */ const el = document.getElementById('errorMessage'); if (!message) { el.classList.add('d-none'); return; } el.textContent = message; el.classList.remove('d-none', 'alert-danger', 'alert-success'); el.classList.add(isSuccess ? 'alert-success' : 'alert-danger'); setTimeout(() => { if (el.textContent === message) { el.classList.add('d-none'); } }, 5000); }
        function logout() { /* ... same ... */ sessionStorage.removeItem('currentUser'); window.location.href = 'login.html'; }

        // --- Event Listeners Setup ---
        function setupEventListeners() {
            // Settings Button
            const settingsBtn = document.getElementById('settingsBtn'); if (settingsBtn) { settingsBtn.addEventListener('click', () => { if (isAdmin) { console.log("Admin settings click."); generateAdminSettingsSliders(); if (adminSettingsModalInstance) adminSettingsModalInstance.show(); } else { console.log("Non-admin settings click -> redirect."); window.location.href = 'preferences.html'; } }); }
            // Admin: Save Day Settings Button
            const saveSettingsBtn = document.getElementById('saveDaySettingsBtn'); if (saveSettingsBtn && isAdmin) { saveSettingsBtn.addEventListener('click', saveAdminDaySettings); }
            // Admin: Controls
            if (isAdmin) { const loadBtn = document.getElementById('loadScheduleBtn'); const fileInput = document.getElementById('jsonUpload'); const confirmBtn = document.getElementById('confirmScheduleBtn'); const cancelBtn = document.getElementById('cancelPreviewBtn'); const generateBtn = document.getElementById('generateScheduleBtn'); if (loadBtn && fileInput && confirmBtn && cancelBtn && generateBtn) { console.log("Admin listeners setup..."); loadBtn.addEventListener('click', () => { const file = fileInput.files[0]; if (file) { processUploadedSchedule(file); } else { showError("Select JSON."); } }); confirmBtn.addEventListener('click', confirmAndPublishSchedule); cancelBtn.addEventListener('click', cancelSchedulePreview); generateBtn.addEventListener('click', () => { console.log("Generate clicked. Download starting..."); try { if (typeof window.downloadSchedule === 'function') { window.downloadSchedule(); showError("Schedule generated & download started.", true); } else { console.error("downloadSchedule not found."); showError("Error: Generation function missing."); } } catch (error) { console.error("Gen Error:", error); showError(`Gen Error: ${error.message}`); } }); } else { console.error("Admin controls missing."); } }
            // Non-Admin: View Toggle
            else { const toggleBtn = document.getElementById('viewToggleBtn'); if(toggleBtn) { toggleBtn.addEventListener('click', () => { viewMode = (viewMode === 'all') ? 'mine' : 'all'; toggleBtn.textContent = (viewMode === 'mine') ? 'Show All Shifts' : 'Show My Shifts Only'; localStorage.setItem('viewMode_' + currentUser, viewMode); console.log(`View mode: ${viewMode}`); displayLiveSchedule(); }); } else { console.error("View toggle missing."); } }
        }

        // Start the application
        document.addEventListener('DOMContentLoaded', initializeApp);

    </script>

</body>
</html>
